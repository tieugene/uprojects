ToDo:
	* UCD - 1-2-3
	* полная последовательность работ (AD) (Проект=>СМР=>КО):
		* общая - виды работ
		* по видам работ - этапы
		* по этапам - до события
	* схема допроса (этап)
	* список документов
	* прохождение заданий по участникам (Swimlanes)
	* ClassD
Notes:
	* порядок событий == AD?
	* need WorkFlow
Исходы:
	1. СМР ГСВ
	2. Согласование проекта => 1.
	3. Проект ГСВ => 2.
	4. ТУ ГСВ => 3.
	5. СМР ГСВ => (а) вот тут хез..., б) согласование?) 4.
	6. Проект ГСН => 5.
	7. ТУ ГСН => 6.
	8. ??? => 7.
	9. ???

Итак, что есть:
	* объекты
	* состояния объектов
	* события
	* задачи
Думаем:
	* объекты:
		* объекты работы (и подобъекты)
		* работы (и подработы)
		* документы
	* объекты могут состоять из объектов
	* события тоже могут состоять из событий
	* состояния тоже могут состоять из состояний
	* события переводят объекты из состояния в состояние
	* у каждого события - 1 автор; у каждой задачи - 1 исполнитель
	* 1 событие (состояние?) может породить несолько задач. Выполнение одной задачи рождает одно событие. 
	* так... а с задачами что делать?:
		1 Состояние объекта определяет (порождает) следующие задачи
		2 выполнение задач порождает события
		3 события переводят объект в другое состояние
		4 goto 1
	* состояние == атрибут? Чтобы не распараллеливат состояния
	* есть атрибуты обязательные, есть - не обязательные. Перейти в другое состояние можно только тогда, когда есть обязательные атрибуты (== произошли обязательные события)
	* я так думаю, что состояние надо задвинуть, оставить только задачи и события
Итого:
	* чтобы произошло _супер_событие - надо чтобы произошли обязательные _суб_события
	* новые задачи появляются, если произошли все необходимые события
FAQ:
	* AD_0.dia:
		* куда лепить ТПР?
		* --//-- Сервис и обслуживание?
	* AD_12_FAQ.dia:
		* "Есть ли ТУ" ГСВ - ТУ на что?
		* "Есть ли ТУ" ГСН - ТУ на что?
		* Что делать с 8, 9, 10
		* Что с Отоплением и КО?
	* AD_5_GSV_SMR.dia:
		* Список документов - где?
		* параллельно - или последовательно со сметой?
Поэтому надо описать:
	* Задачи
	* События
	* Их формы
	* реакцию
A222 - может - так:
	* каждое событие имеет свою форму ввода
	* генерирует новые задачи
	* и закрывает (если надо) задачу-родителя; итого - связан с предком и сыновьями
	* каждый исполнитель видит только свои задачи
	* начальство - полную картину
	* Картина - отчет по объекту[ => работы. Не редактируется (!)]
	* Отчет по объекту обрабатывает все события и задачи
=> создать:
	* CD задач-событий
	* схемы переходов задачи-события

или так:
	* юзеры генерят только события
	* события генерят задачи (открытые) - ожидают событий
	* юзеры видят не столько задачи, сколько ожидаемые события
	* задачи закрываются наступлением событий (более других) - т.е. триггерно

	* !!! может их не делить, а просто закрывать задачи?!! а то как-то цепочки события-задачи кумарят
	* и "открытие" задачи зависит от закрытия более других задач.
	* и всё это описывается State Diagram (?)
	* График выполнения проекта - граф; исполнение - цветом (закрыто - одним, по графику - другим, опоздание - третьим)
	* Каждая задача имеет время выполнения; Max время проекта - Max сумма времени задач => в любой момент можно посчитать - попали или нет
== A223 ==
Суть:
	* Все бизнес-процессы (т.е. последовательнсти действий) есть последовательности Задач: одно действие - один типа Задач;
	* Задача может зависеть от других Задач - как начало Задачи, так и её завершение;
	* Задача не может быть удалена или изменена - только завершена с тем или иным исходом;
	* Задача может "включать" другие Задачи путем установления зависимостей.
Особенности:
	* Любая Задача имеет как минимум автора, дату/время создания, исполнителя, дату/время прочтения задачи исполнителем; дату/время завершения (для завершенных);
	* Задача может быть только в четырех состояниях: неактивная, активная непрочитанная, активная прочитанная (автомат), выполненная (с тем или иным исходом);
	* Состояние задачи может зависеть от состояния других Задач:
		* Задача может быть неактивной до тех пор, пока не будут завершены с нужным исходом другие Задачи, от которых зависит эта задача;
		* Активная задача не может быть завершена с определенным исходом, если не завершены с нужным исходом Задачи, от которых она зависит;
	* Выполнение задачи может создавать другие задачи (в зависимости от исхода);
	* Самая первая задача в бизнес-процессе может быть создана Событием;
	* Завершение Задачи может породить другую Задачу того же типа; тогда в работе участвует только последняя задача в такой цепочке (пример - изменение сроков выполнения задачи, замена исполнителя) - получается "история выполнения задачи";
Примеры:
	* Зависимость неактивности: "Оплатить счет" неактивна, пока не выполнено "Получить счет";
	* Зависимость завершения: "Оплатить счет" не может быть завершена успешно, пока не выполнена задача "Получить выписку из банка" - тоже успешно;
	* Группировка: "Купить товар" не может быть завершена, пока не завершены "Оплатить товар" и "Получить товар".
	* Зависимость следующих задач от исхода предыдущей: завершение "Оплатить счет" создает "Получить товар" (если счет оплачен успешно) - или же "Купить за нал", если не оплачен по причине денег на счету ёк;
	* С Задачами можно работать в любом ПИМе; некоторые можно там же завершать, если ПИМ поддерживает нужные исходы.
Отличия от классики:
	* Нет "состояния" процесса или его части (начал выполнять, выполнил наполовину и т.д.) - есть только Задачи - выполненные и не выполненные. Т.е. "состояние" процесса - это суперпозиция состояний всех его задач.
	* Нет многих состояний Задачи (начал выполнять, почти закончил выполнять и т.д.) - только выполнена или нет.
Ключевые преимущества:
	* динамическое планирование проекта;
	* внятное визуальное представление хода выполнения проекта - для руководства (цветной граф - цвет задачи зависит от успешности и сроков её выполнения);
	* простое и удобное представление для исполнителей (простой список задач с возможностью группировки/сортировки/фильтров);
Notes:
	* Следующая задача не может открыться, пока не завершена предыдущая.
	* Суперзадача не может завершиться, пока не завершены подзадачи
	* неоткрытой может бычть задача, которая не может начаться из-за предыдущей - но она всё равно рано или поздно должна быть выполнена
== A224 ==
Цель: [рубить баблосики путем] Упорядочивание бизнес-процессов организаций максимально простым и удобным для пользователей способом [при этом самому особо не заморачиваясь].
